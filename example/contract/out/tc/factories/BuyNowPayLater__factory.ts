/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  BuyNowPayLater,
  BuyNowPayLaterInterface,
} from "../BuyNowPayLater";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract FakeKairos",
        name: "_kairos",
        type: "address",
      },
      {
        internalType: "contract FlashLender",
        name: "_flashLender",
        type: "address",
      },
      {
        internalType: "contract MarketPlace",
        name: "_market",
        type: "address",
      },
      {
        internalType: "contract IERC721",
        name: "_nft",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_wEth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registryAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "abiArgs",
        type: "bytes",
      },
    ],
    name: "MissingOffchainDataError",
    type: "error",
  },
  {
    inputs: [],
    name: "buyNowPayLater",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "callbackData",
        type: "bytes",
      },
    ],
    name: "flashCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "recordParameter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610c14380380610c1483398101604081905261002f916100ac565b6001600160a01b039283166080819052600180546001600160a01b031990811697861697909717905560028054871695851695909517909455600380548616909417909355600480548516918316919091179055600580549093169116179055610121565b6001600160a01b03811681146100a957600080fd5b50565b600080600080600060a086880312156100c457600080fd5b85516100cf81610094565b60208701519095506100e081610094565b60408701519094506100f181610094565b606087015190935061010281610094565b608087015190925061011381610094565b809150509295509295909350565b608051610ad861013c60003960006104670152610ad86000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631e56d58314610046578063c1012f8114610050578063e373923814610063575b600080fd5b61004e610076565b005b61004e61005e3660046105aa565b610112565b61004e6100713660046106b4565b610124565b600254600454604080513360208201526001600160a01b0392831681830152600160608083019190915282518083039091018152608082019283905263167ec36d60e01b909252919092169163167ec36d916100de91670de0b6b3a764000091608401610784565b600060405180830381600087803b1580156100f857600080fd5b505af115801561010c573d6000803e3d6000fd5b50505050565b600061011f82848361082d565b505050565b60008060008380602001905181019061013d9190610905565b60055460035460405163095ea7b360e01b81526001600160a01b039182166004820152670de0b6b3a76400006024820152949750929550909350169063095ea7b3906044016020604051808303816000875af11580156101a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c59190610948565b506101d082826103bc565b600480546001805460405163095ea7b360e01b81526001600160a01b03918216948101949094526024840191909152169063095ea7b390604401600060405180830381600087803b15801561022457600080fd5b505af1158015610238573d6000803e3d6000fd5b505060015460405163c1bce0b760e01b81526001600160a01b038681166004830152602482018690526709b6e64a8ec600006044830152909116925063c1bce0b79150606401600060405180830381600087803b15801561029857600080fd5b505af11580156102ac573d6000803e3d6000fd5b50506005546040516323b872dd60e01b81526001600160a01b038781166004830152306024830152670429d069189e0000604483015290911692506323b872dd91506064016020604051808303816000875af1158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190610948565b5060055460025460405163095ea7b360e01b81526001600160a01b039182166004820152670de0b6b3a7640000602482015291169063095ea7b3906044016020604051808303816000875af1158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b59190610948565b5050505050565b60006104326040518060400160405280601d81526020017f687474703a2f2f6c6f63616c686f73743a383038302f6170692f627579000000815250848460405160200161041e9291906001600160a01b03929092168252602082015260400190565b6040516020818303038152906040526104d7565b90506000808280602001905181019061044b9190610971565b604051630bacc3c960e41b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bacc3c909061049e9085908590600401610a2c565b600060405180830381600087803b1580156104b857600080fd5b505af11580156104cc573d6000803e3d6000fd5b505050505050505050565b6060600080546104e6906107a5565b90506000036105175730838360405163ab3e92cf60e01b815260040161050e93929190610a62565b60405180910390fd5b60008054610524906107a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610550906107a5565b801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b5050505050905092915050565b600080602083850312156105bd57600080fd5b823567ffffffffffffffff808211156105d557600080fd5b818501915085601f8301126105e957600080fd5b8135818111156105f857600080fd5b86602082850101111561060a57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156106555761065561061c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106845761068461061c565b604052919050565b600067ffffffffffffffff8211156106a6576106a661061c565b50601f01601f191660200190565b6000602082840312156106c657600080fd5b813567ffffffffffffffff8111156106dd57600080fd5b8201601f810184136106ee57600080fd5b80356107016106fc8261068c565b61065b565b81815285602083850101111561071657600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b8381101561074f578181015183820152602001610737565b50506000910152565b60008151808452610770816020860160208601610734565b601f01601f19169290920160200192915050565b82815260406020820152600061079d6040830184610758565b949350505050565b600181811c908216806107b957607f821691505b6020821081036107d957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561011f57600081815260208120601f850160051c810160208610156108065750805b601f850160051c820191505b8181101561082557828155600101610812565b505050505050565b67ffffffffffffffff8311156108455761084561061c565b6108598361085383546107a5565b836107df565b6000601f84116001811461088d57600085156108755750838201355b600019600387901b1c1916600186901b1783556103b5565b600083815260209020601f19861690835b828110156108be578685013582556020948501946001909201910161089e565b50868210156108db5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6001600160a01b038116811461090257600080fd5b50565b60008060006060848603121561091a57600080fd5b8351610925816108ed565b6020850151909350610936816108ed565b80925050604084015190509250925092565b60006020828403121561095a57600080fd5b8151801515811461096a57600080fd5b9392505050565b600080828403608081121561098557600080fd5b606081121561099357600080fd5b5061099c610632565b83516109a7816108ed565b81526020848101519082015260408085015190820152606084015190925067ffffffffffffffff8111156109da57600080fd5b8301601f810185136109eb57600080fd5b80516109f96106fc8261068c565b818152866020838501011115610a0e57600080fd5b610a1f826020830160208601610734565b8093505050509250929050565b60018060a01b038351168152602083015160208201526040830151604082015260806060820152600061079d6080830184610758565b6001600160a01b0384168152606060208201819052600090610a8690830185610758565b8281036040840152610a988185610758565b969550505050505056fea26469706673582212207ea19ae1897253601c3fc6df7cbab745997fff6c47064fa54cd8c48ce614f4b264736f6c63430008120033";

type BuyNowPayLaterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BuyNowPayLaterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BuyNowPayLater__factory extends ContractFactory {
  constructor(...args: BuyNowPayLaterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _kairos: PromiseOrValue<string>,
    _flashLender: PromiseOrValue<string>,
    _market: PromiseOrValue<string>,
    _nft: PromiseOrValue<string>,
    _wEth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BuyNowPayLater> {
    return super.deploy(
      _kairos,
      _flashLender,
      _market,
      _nft,
      _wEth,
      overrides || {}
    ) as Promise<BuyNowPayLater>;
  }
  override getDeployTransaction(
    _kairos: PromiseOrValue<string>,
    _flashLender: PromiseOrValue<string>,
    _market: PromiseOrValue<string>,
    _nft: PromiseOrValue<string>,
    _wEth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _kairos,
      _flashLender,
      _market,
      _nft,
      _wEth,
      overrides || {}
    );
  }
  override attach(address: string): BuyNowPayLater {
    return super.attach(address) as BuyNowPayLater;
  }
  override connect(signer: Signer): BuyNowPayLater__factory {
    return super.connect(signer) as BuyNowPayLater__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BuyNowPayLaterInterface {
    return new utils.Interface(_abi) as BuyNowPayLaterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BuyNowPayLater {
    return new Contract(address, _abi, signerOrProvider) as BuyNowPayLater;
  }
}
